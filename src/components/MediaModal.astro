<div id="media-modal" class="fixed inset-0 z-50 hidden bg-black bg-opacity-90 flex items-center justify-center p-4">
  <div id="modal-container" class="relative max-w-6xl w-full mx-auto">
    <!-- Close button -->
    <button id="modal-close" class="absolute top-0 right-0 m-4 z-10 text-white hover:text-gray-300">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Fullscreen & Share buttons -->
    <div class="absolute top-0 right-14 m-4 z-10 flex space-x-3">
      <button id="fullscreen-button" class="text-white hover:text-gray-300" title="Toggle fullscreen mode">
        <svg id="fullscreen-enter" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
        </svg>
        <svg id="fullscreen-exit" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      <button id="share-button" class="text-white hover:text-gray-300" title="Copy link to clipboard">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
        </svg>
      </button>
    </div>
    
    <!-- Share confirmation tooltip -->
    <div id="share-tooltip" class="absolute top-14 right-14 bg-white text-gray-800 px-3 py-2 rounded shadow-lg z-10 hidden">
      Link copied to clipboard!
    </div>
    
    <!-- Navigation buttons -->
    <button id="prev-media" class="absolute left-0 top-1/2 transform -translate-y-1/2 m-4 z-10 text-white hover:text-gray-300">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    
    <button id="next-media" class="absolute right-0 top-1/2 transform -translate-y-1/2 m-4 z-10 text-white hover:text-gray-300">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
    
    <!-- Media container -->
    <div id="modal-content" class="bg-transparent rounded-lg overflow-hidden">
      <!-- Media content will be injected here -->
    </div>
    
    <!-- Media info -->
    <div id="modal-info" class="mt-4 text-white text-center">
      <h2 id="modal-title" class="text-xl font-bold"></h2>
      <p id="modal-description" class="text-sm text-gray-300 mt-2"></p>
    </div>
  </div>
</div>

<script>
  let currentMediaIndex = 0;
  let mediaItems = [];
  let isFullscreen = false;

  document.addEventListener('DOMContentLoaded', () => {
    // Get all media cards
    const mediaCards = document.querySelectorAll('.media-card');
    const modal = document.getElementById('media-modal');
    const modalContainer = document.getElementById('modal-container');
    const modalContent = document.getElementById('modal-content');
    const modalTitle = document.getElementById('modal-title');
    const modalDescription = document.getElementById('modal-description');
    const prevButton = document.getElementById('prev-media');
    const nextButton = document.getElementById('next-media');
    const closeButton = document.getElementById('modal-close');
    const fullscreenButton = document.getElementById('fullscreen-button');
    const fullscreenEnterIcon = document.getElementById('fullscreen-enter');
    const fullscreenExitIcon = document.getElementById('fullscreen-exit');
    const shareButton = document.getElementById('share-button');
    const shareTooltip = document.getElementById('share-tooltip');
    
    // Create array of all media items
    mediaItems = Array.from(mediaCards).map(card => {
      const el = card as HTMLElement;
      return {
        id: el.dataset.mediaId,
        type: el.dataset.type,
        src: el.dataset.src,
        videoId: el.dataset.videoId,
        title: el.querySelector('h2')?.textContent || '',
        description: el.querySelector('p')?.textContent || '',
        tags: (el.dataset.tags || '').split(',')
      };
    });
    
    // Check URL hash for media ID to open modal directly
    checkUrlHash();
    
    // Listen for hash changes to support navigation
    window.addEventListener('hashchange', checkUrlHash);
    
    // Add click event to each media card
    mediaCards.forEach((card, index) => {
      card.addEventListener('click', () => {
        openModal(index);
      });
    });
    
    // Navigation buttons
    prevButton?.addEventListener('click', () => {
      navigateMedia(-1);
    });
    
    nextButton?.addEventListener('click', () => {
      navigateMedia(1);
    });
    
    // Close button
    closeButton?.addEventListener('click', closeModal);
    
    // Fullscreen button - toggle fullscreen mode
    fullscreenButton?.addEventListener('click', toggleFullscreen);
    
    // Listen for fullscreen change events
    document.addEventListener('fullscreenchange', handleFullscreenChange);
    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
    document.addEventListener('mozfullscreenchange', handleFullscreenChange);
    document.addEventListener('MSFullscreenChange', handleFullscreenChange);
    
    // Share button - copy modal URL with specific media ID
    shareButton?.addEventListener('click', () => {
      const item = mediaItems[currentMediaIndex];
      if (!item) return;
      
      // Create a URL with a hash parameter for the current media item
      const shareUrl = `${window.location.origin}${window.location.pathname}#media=${item.id}`;
      
      // Copy to clipboard
      navigator.clipboard.writeText(shareUrl).then(() => {
        // Show confirmation tooltip
        if (shareTooltip) {
          shareTooltip.classList.remove('hidden');
          setTimeout(() => {
            shareTooltip.classList.add('hidden');
          }, 2000);
        }
      });
    });
    
    // Close on escape key (only if not in fullscreen)
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !isFullscreen) closeModal();
      if (e.key === 'ArrowLeft') navigateMedia(-1);
      if (e.key === 'ArrowRight') navigateMedia(1);
    });
    
    // Close when clicking outside
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) closeModal();
    });
    
    // Function to check URL hash for media ID
    function checkUrlHash() {
      const hash = window.location.hash;
      if (hash.startsWith('#media=')) {
        const mediaId = hash.substring(7); // Remove '#media='
        const mediaIndex = mediaItems.findIndex(item => item.id === mediaId);
        if (mediaIndex !== -1) {
          openModal(mediaIndex);
        }
      }
    }
    
    // Function to toggle fullscreen
    function toggleFullscreen() {
      if (!modalContainer) return;
      
      if (!isFullscreen) {
        // Enter fullscreen
        if (modalContainer.requestFullscreen) {
          modalContainer.requestFullscreen();
        } else if ((modalContainer as any).mozRequestFullScreen) {
          (modalContainer as any).mozRequestFullScreen();
        } else if ((modalContainer as any).webkitRequestFullscreen) {
          (modalContainer as any).webkitRequestFullscreen();
        } else if ((modalContainer as any).msRequestFullscreen) {
          (modalContainer as any).msRequestFullscreen();
        }
      } else {
        // Exit fullscreen
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if ((document as any).mozCancelFullScreen) {
          (document as any).mozCancelFullScreen();
        } else if ((document as any).webkitExitFullscreen) {
          (document as any).webkitExitFullscreen();
        } else if ((document as any).msExitFullscreen) {
          (document as any).msExitFullscreen();
        }
      }
    }
    
    // Handle fullscreen change events
    function handleFullscreenChange() {
      isFullscreen = !!document.fullscreenElement || 
                     !!(document as any).mozFullScreenElement ||
                     !!(document as any).webkitFullscreenElement || 
                     !!(document as any).msFullscreenElement;
                     
      // Update fullscreen button icon
      if (fullscreenEnterIcon && fullscreenExitIcon) {
        if (isFullscreen) {
          fullscreenEnterIcon.classList.add('hidden');
          fullscreenExitIcon.classList.remove('hidden');
        } else {
          fullscreenEnterIcon.classList.remove('hidden');
          fullscreenExitIcon.classList.add('hidden');
        }
      }
    }
    
    // Function to open modal
    function openModal(index: number) {
      currentMediaIndex = index;
      updateModalContent();
      
      // Update URL hash without triggering a page reload
      const mediaId = mediaItems[index]?.id;
      if (mediaId) {
        history.replaceState(null, '', `#media=${mediaId}`);
      }
      
      modal?.classList.remove('hidden');
      modal?.classList.add('flex');
      document.body.style.overflow = 'hidden'; // Prevent scrolling
    }
    
    // Function to close modal
    function closeModal() {
      // Exit fullscreen if active
      if (isFullscreen) {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if ((document as any).mozCancelFullScreen) {
          (document as any).mozCancelFullScreen();
        } else if ((document as any).webkitExitFullscreen) {
          (document as any).webkitExitFullscreen();
        } else if ((document as any).msExitFullscreen) {
          (document as any).msExitFullscreen();
        }
      }
      
      modal?.classList.add('hidden');
      modal?.classList.remove('flex');
      document.body.style.overflow = ''; // Restore scrolling
      
      // Remove URL hash
      history.replaceState(null, '', window.location.pathname);
      
      // Stop any videos that might be playing
      const videoElement = modalContent?.querySelector('video');
      if (videoElement) videoElement.pause();
      
      // Clear YouTube iframe to stop playback
      const youtubeIframe = modalContent?.querySelector('iframe');
      if (youtubeIframe && modalContent) {
        modalContent.innerHTML = '';
      }
    }
    
    // Function to navigate between media items
    function navigateMedia(direction: number) {
      // Stop any videos that might be playing
      const videoElement = modalContent?.querySelector('video');
      if (videoElement) videoElement.pause();
      
      // Clear YouTube iframe to stop playback
      const youtubeIframe = modalContent?.querySelector('iframe');
      if (youtubeIframe && modalContent) {
        modalContent.innerHTML = '';
      }
      
      currentMediaIndex = (currentMediaIndex + direction + mediaItems.length) % mediaItems.length;
      updateModalContent();
      
      // Update URL hash
      const mediaId = mediaItems[currentMediaIndex]?.id;
      if (mediaId) {
        history.replaceState(null, '', `#media=${mediaId}`);
      }
    }
    
    // Function to update modal content
    function updateModalContent() {
      const item = mediaItems[currentMediaIndex];
      
      if (!item) return;
      
      modalTitle!.textContent = item.title;
      modalDescription!.textContent = item.description;
      
      // Clear previous content
      if (modalContent) modalContent.innerHTML = '';
      
      // Position buttons based on media type
      if (item.type === 'youtube') {
        // Move buttons to bottom-right for YouTube videos to avoid conflict with native controls
        if (fullscreenButton && shareButton) {
          fullscreenButton.classList.add('bottom-0', 'top-auto');
          shareButton.classList.add('bottom-0', 'top-auto');
          if (shareButton.parentElement) {
            shareButton.parentElement.classList.add('bottom-0', 'right-4', 'top-auto', 'm-4');
            shareButton.parentElement.classList.remove('top-0', 'right-14');
          }
          if (shareTooltip) {
            shareTooltip.classList.add('bottom-14', 'top-auto');
            shareTooltip.classList.remove('top-14');
          }
        }
      } else {
        // Reset button position for non-YouTube content
        if (fullscreenButton && shareButton) {
          fullscreenButton.classList.remove('bottom-0', 'top-auto');
          shareButton.classList.remove('bottom-0', 'top-auto');
          if (shareButton.parentElement) {
            shareButton.parentElement.classList.remove('bottom-0', 'right-4', 'top-auto');
            shareButton.parentElement.classList.add('top-0', 'right-14', 'm-4');
          }
          if (shareTooltip) {
            shareTooltip.classList.remove('bottom-14', 'top-auto');
            shareTooltip.classList.add('top-14');
          }
        }
      }
      
      // Add new content based on type
      if (item.type === 'image') {
        const img = document.createElement('img');
        img.src = item.src || '';
        img.alt = item.title;
        img.className = 'max-h-[75vh] mx-auto';
        modalContent?.appendChild(img);
      } else if (item.type === 'video') {
        const video = document.createElement('video');
        video.src = item.src || '';
        video.controls = true;
        video.autoplay = true;
        video.className = 'max-h-[75vh] w-full';
        modalContent?.appendChild(video);
      } else if (item.type === 'youtube') {
        // Debug: Log the videoId
        console.log('YouTube VideoID:', item.videoId);
        
        if (!item.videoId) {
          // Fallback for missing videoId
          const errorMessage = document.createElement('div');
          errorMessage.className = 'bg-red-800 text-white p-4 rounded';
          errorMessage.textContent = 'Error: Video ID is missing';
          modalContent?.appendChild(errorMessage);
          return;
        }
        
        // Create responsive container for the iframe
        const container = document.createElement('div');
        container.className = 'relative w-full pb-[56.25%] h-0'; // 16:9 aspect ratio
        
        // Create YouTube iframe
        const iframe = document.createElement('iframe');
        iframe.width = '100%';
        iframe.height = '100%';
        iframe.src = `https://www.youtube.com/embed/${item.videoId}`;
        iframe.title = item.title;
        iframe.frameBorder = '0';
        iframe.setAttribute('allowfullscreen', 'true');
        iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
        iframe.className = 'absolute top-0 left-0 w-full h-full';
        
        container.appendChild(iframe);
        modalContent?.appendChild(container);
      }
    }
  });
</script> 