---
import Layout from '../../layouts/Layout.astro';

const pageTitle = 'JSON Formatter/Converter';
const pageDescription = 'Format, validate, and convert JSON from Ruby, Python, and JavaScript object formats';
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="json-formatter-wrapper">
    <div class="container mx-auto px-4">
      <main class="json-container">
        <h1 class="page-title">JSON Formatter/Converter</h1>
        <p class="page-subtitle">Format, validate, and convert between JSON and other data formats</p>
        
        <div class="type-selector">
          <label for="input-format" class="selector-label">
            <svg class="selector-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M4 7h16M4 12h16M4 17h16"/>
            </svg>
            Input Format:
          </label>
          <select id="input-format" class="type-select">
            <option value="json">JSON</option>
            <option value="ruby">Ruby Hash</option>
            <option value="python">Python Dictionary</option>
            <option value="javascript">JavaScript Object</option>
          </select>
        </div>
        
        <div class="controls">
          <button id="format-btn" class="btn btn-primary">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            Format & Convert
          </button>
          <button id="minify-btn" class="btn btn-secondary">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2"/>
            </svg>
            Minify
          </button>
          <button id="validate-btn" class="btn btn-info">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
            </svg>
            Validate
          </button>
          <button id="clear-btn" class="btn btn-clear">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M18 6L6 18M6 6l12 12"/>
            </svg>
            Clear All
          </button>
        </div>
        
        <div id="validation-message" class="validation-message hidden"></div>
        
        <div class="textareas-container">
          <div class="textarea-wrapper">
            <label for="input-text" class="textarea-label">
              <svg class="label-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
              </svg>
              Input (Multiple Formats)
            </label>
            <textarea
              id="input-text"
              class="textarea"
              placeholder="Enter JSON, Ruby hash, Python dict, or JS object..."
              rows="30"
              spellcheck="false"
            ></textarea>
            <div class="textarea-info">
              <span id="input-length" class="char-count">0 characters</span>
              <span id="input-lines" class="line-count">0 lines</span>
            </div>
          </div>
          
          <div class="textarea-wrapper">
            <label for="output-text" class="textarea-label">
              <svg class="label-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
              </svg>
              Formatted JSON Output
            </label>
            <textarea
              id="output-text"
              class="textarea"
              placeholder="Formatted JSON will appear here..."
              rows="30"
              spellcheck="false"
              readonly
            ></textarea>
            <div class="textarea-info">
              <span id="output-length" class="char-count">0 characters</span>
              <span id="output-lines" class="line-count">0 lines</span>
            </div>
          </div>
        </div>
        
        <div class="info-section" id="info-section">
          <!-- Dynamic content will be inserted here -->
        </div>
      </main>
    </div>
  </div>

  <script>
    // Type definitions
    interface FormatInfo {
      title: string;
      description: string;
      syntax: string;
      features: string[];
      history: string;
      example: { input: string; output: string };
    }

    // Default examples for each format
    const defaultExamples: Record<string, string> = {
      json: `{"name":"Alice Johnson","age":30,"email":"alice@example.com","isActive":true,"roles":["developer","admin"],"address":{"city":"San Francisco","state":"CA","zipCode":"94102"},"preferences":{"theme":"dark","notifications":true}}`,
      ruby: `{
  :name => "Bob Smith",
  :age => 28,
  :email => "bob@example.com",
  "company" => "Tech Corp",
  :skills => ["Ruby", "Rails", "PostgreSQL"],
  :active => true,
  :deleted_at => nil,
  :metadata => {
    :created_at => "2024-01-15",
    :department => "Engineering",
    :notes => nil
  }
}`,
      python: `{
    'name': 'Charlie Davis',
    'age': 35,
    'email': 'charlie@example.com',
    'is_admin': True,
    'languages': ['Python', 'JavaScript', 'Go'],
    'settings': {
        'theme': 'light',
        'auto_save': False,
        'timeout': None
    },
    'projects': ['data-analysis', 'web-scraping']
}`,
      javascript: `{
  name: 'Diana Prince',
  age: 32,
  email: 'diana@example.com',
  isVerified: true,
  skills: ['JavaScript', 'TypeScript', 'React', 'Node.js'],
  location: {
    city: 'New York',
    country: 'USA'
  },
  settings: {
    notifications: true,
    theme: 'auto',
  }
}`
    };

    // Information for each format
    const formatInfo: Record<string, FormatInfo> = {
      json: {
        title: 'JSON (JavaScript Object Notation)',
        description: 'JSON is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate. It has become the de facto standard for web APIs and configuration files.',
        syntax: 'JSON uses a strict syntax with double quotes for all keys and string values. It supports objects, arrays, strings, numbers, booleans (true/false), and null. Comments are not allowed.',
        features: [
          'Language-independent data format',
          'Strict syntax rules for reliability',
          'Native support in JavaScript and most modern languages',
          'Human-readable and machine-parseable',
          'Widely used for APIs and configuration'
        ],
        history: 'JSON was created by Douglas Crockford in the early 2000s as a simple alternative to XML for data interchange. It was first specified in RFC 4627 (2006) and later updated in RFC 7159 (2014) and RFC 8259 (2017). Despite its name suggesting a JavaScript origin, JSON is now a language-independent standard supported by virtually every programming language.',
        example: {
          input: '{"name":"John","age":30}',
          output: '{\n  "name": "John",\n  "age": 30\n}'
        }
      },
      ruby: {
        title: 'Ruby Hash (Hash Rocket Syntax)',
        description: 'Ruby hashes are Ruby\'s implementation of dictionaries/associative arrays. The "hash rocket" (=>) syntax is Ruby\'s traditional way of defining key-value pairs, supporting both symbol and string keys.',
        syntax: 'Ruby hashes use => (hash rocket) or : (modern symbol syntax). Keys can be symbols (:key), strings ("key"), or other objects. Values can be any Ruby object. Symbols are commonly used as they are more memory-efficient.',
        features: [
          'Flexible key types (symbols, strings, numbers, etc.)',
          'Hash rocket (=>) syntax for clarity',
          'Modern symbol shorthand syntax available',
          'Native Ruby data structure',
          'Trailing commas allowed'
        ],
        history: 'Ruby was created by Yukihiro Matsumoto (Matz) in 1995. The hash rocket syntax has been part of Ruby since its inception, borrowed from Perl\'s => operator. Ruby 1.9 (2007) introduced the JavaScript-style symbol shorthand syntax (key: value), but the hash rocket syntax remains widely used, especially when keys are not symbols or when consistency is desired.',
        example: {
          input: '{ :name => "John", :age => 30, "city" => "NYC" }',
          output: '{\n  "name": "John",\n  "age": 30,\n  "city": "NYC"\n}'
        }
      },
      python: {
        title: 'Python Dictionary',
        description: 'Python dictionaries (dicts) are Python\'s built-in mapping type for storing key-value pairs. They use single quotes by convention and have special boolean and null value names.',
        syntax: 'Python dicts use curly braces with keys and values separated by colons. Single quotes are conventional for strings (though double quotes work). Booleans are True/False (capitalized), and null is None.',
        features: [
          'Native Python data structure',
          'Single or double quotes for strings',
          'True/False/None instead of true/false/null',
          'Flexible and dynamic',
          'Dict comprehensions for creation'
        ],
        history: 'Python was created by Guido van Rossum and first released in 1991. Dictionaries have been a core Python data structure from the beginning, with syntax inspired by ABC and other languages. Python 3.6 (2016) made dictionaries ordered by insertion order, and Python 3.7 (2018) made this an official language guarantee.',
        example: {
          input: "{'name': 'John', 'age': 30, 'active': True, 'data': None}",
          output: '{\n  "name": "John",\n  "age": 30,\n  "active": true,\n  "data": null\n}'
        }
      },
      javascript: {
        title: 'JavaScript Object Literal',
        description: 'JavaScript object literals are the native way to define objects in JavaScript. Unlike JSON, they have more relaxed syntax rules, including unquoted keys and trailing commas.',
        syntax: 'JS objects can have unquoted keys (if they are valid identifiers), single or double quotes for strings, trailing commas, comments, and more. They are more permissive than JSON.',
        features: [
          'Unquoted keys for valid identifiers',
          'Single or double quotes for strings',
          'Trailing commas allowed',
          'Can include functions and undefined',
          'Comments allowed'
        ],
        history: 'JavaScript was created by Brendan Eich at Netscape in 1995, originally in just 10 days. Object literals have been part of JavaScript from the start, with syntax influenced by Self and Scheme. ES6 (2015) added shorthand property syntax, computed property names, and method definitions. The relaxed syntax of JS objects inspired JSON, though JSON enforces stricter rules.',
        example: {
          input: "{ name: 'John', age: 30, city: 'NYC' }",
          output: '{\n  "name": "John",\n  "age": 30,\n  "city": "NYC"\n}'
        }
      }
    };

    // Get DOM elements
    const inputFormatSelect = document.getElementById('input-format') as HTMLSelectElement;
    const inputTextArea = document.getElementById('input-text') as HTMLTextAreaElement;
    const outputTextArea = document.getElementById('output-text') as HTMLTextAreaElement;
    const formatBtn = document.getElementById('format-btn');
    const minifyBtn = document.getElementById('minify-btn');
    const validateBtn = document.getElementById('validate-btn');
    const clearBtn = document.getElementById('clear-btn');
    const validationMessage = document.getElementById('validation-message');
    const inputLength = document.getElementById('input-length');
    const inputLines = document.getElementById('input-lines');
    const outputLength = document.getElementById('output-length');
    const outputLines = document.getElementById('output-lines');
    const infoSection = document.getElementById('info-section');

    // Update character and line counts
    function updateCounts() {
      if (inputLength) {
        inputLength.textContent = `${inputTextArea.value.length} characters`;
      }
      if (inputLines) {
        const lines = inputTextArea.value.split('\n').length;
        inputLines.textContent = `${lines} lines`;
      }
      if (outputLength) {
        outputLength.textContent = `${outputTextArea.value.length} characters`;
      }
      if (outputLines) {
        const lines = outputTextArea.value.split('\n').length;
        outputLines.textContent = `${lines} lines`;
      }
    }

    // Convert Ruby hash to JSON-parseable string
    function rubyToJSON(rubyStr: string): string {
      let result = rubyStr;
      
      // Replace hash rockets with colons
      result = result.replace(/=>(\s*)/g, ':$1');
      
      // Convert symbol keys to strings
      result = result.replace(/:([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '"$1":');
      
      // Ensure all string keys are double-quoted
      result = result.replace(/'([^']*)'/g, '"$1"');
      
      // Replace Ruby nil with null
      result = result.replace(/\bnil\b/g, 'null');
      
      return result;
    }

    // Convert Python dict to JSON-parseable string
    function pythonToJSON(pythonStr: string): string {
      let result = pythonStr;
      
      // Replace single quotes with double quotes (careful with escaped quotes)
      result = result.replace(/'/g, '"');
      
      // Replace Python booleans
      result = result.replace(/\bTrue\b/g, 'true');
      result = result.replace(/\bFalse\b/g, 'false');
      
      // Replace Python None with null
      result = result.replace(/\bNone\b/g, 'null');
      
      return result;
    }

    // Convert JavaScript object to JSON-parseable string
    function jsToJSON(jsStr: string): string {
      let result = jsStr;
      
      // Replace single quotes with double quotes
      result = result.replace(/'([^']*)'/g, '"$1"');
      
      // Add quotes to unquoted keys
      result = result.replace(/([{,]\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\s*:/g, '$1"$2":');
      
      // Remove trailing commas
      result = result.replace(/,(\s*[}\]])/g, '$1');
      
      // Replace undefined with null
      result = result.replace(/\bundefined\b/g, 'null');
      
      return result;
    }

    // Detect if input is a Ruby hash
    function isRubyHash(input: string): boolean {
      // Look for hash rocket syntax (=>)
      if (/=>\s*/.test(input)) {
        return true;
      }
      
      // Look for symbol syntax (:symbol_name)
      // This checks for symbols followed by hash rockets or the newer syntax
      if (/:([a-zA-Z_][a-zA-Z0-9_]*)\s*(=>|:)/.test(input)) {
        return true;
      }
      
      // Look for Ruby nil
      if (/\bnil\b/.test(input)) {
        return true;
      }
      
      return false;
    }

    // Convert input to JSON based on format
    function convertToJSON(input: string, format: string): any {
      let jsonString = input.trim();
      
      // Auto-detect Ruby hash regardless of selected format
      if (isRubyHash(jsonString)) {
        jsonString = rubyToJSON(jsonString);
      } else {
        // Use the selected format
        switch (format) {
          case 'ruby':
            jsonString = rubyToJSON(jsonString);
            break;
          case 'python':
            jsonString = pythonToJSON(jsonString);
            break;
          case 'javascript':
            jsonString = jsToJSON(jsonString);
            break;
          case 'json':
            // Already JSON, no conversion needed
            break;
        }
      }
      
      return JSON.parse(jsonString);
    }

    // Format button handler
    formatBtn?.addEventListener('click', () => {
      try {
        const input = inputTextArea.value.trim();
        if (!input) {
          showValidation('Please enter some data to format', 'warning');
          return;
        }
        
        const format = inputFormatSelect.value;
        const parsed = convertToJSON(input, format);
        const formatted = JSON.stringify(parsed, null, 2);
        
        outputTextArea.value = formatted;
        updateCounts();
        showValidation('Successfully formatted and converted to JSON!', 'success');
      } catch (error) {
        showValidation('Error: ' + (error as Error).message, 'error');
      }
    });

    // Minify button handler
    minifyBtn?.addEventListener('click', () => {
      try {
        const input = inputTextArea.value.trim();
        if (!input) {
          showValidation('Please enter some data to minify', 'warning');
          return;
        }
        
        const format = inputFormatSelect.value;
        const parsed = convertToJSON(input, format);
        const minified = JSON.stringify(parsed);
        
        outputTextArea.value = minified;
        updateCounts();
        showValidation('Successfully minified to JSON!', 'success');
      } catch (error) {
        showValidation('Error: ' + (error as Error).message, 'error');
      }
    });

    // Validate button handler
    validateBtn?.addEventListener('click', () => {
      try {
        const input = inputTextArea.value.trim();
        if (!input) {
          showValidation('Please enter some data to validate', 'warning');
          return;
        }
        
        const format = inputFormatSelect.value;
        const parsed = convertToJSON(input, format);
        
        // Count keys if object, items if array
        let info = '';
        if (Array.isArray(parsed)) {
          info = ` Contains ${parsed.length} items.`;
        } else if (typeof parsed === 'object' && parsed !== null) {
          const keys = Object.keys(parsed);
          info = ` Contains ${keys.length} keys.`;
        }
        
        showValidation(`Valid ${format} format!${info}`, 'success');
      } catch (error) {
        showValidation('Invalid format: ' + (error as Error).message, 'error');
      }
    });

    // Clear button handler
    clearBtn?.addEventListener('click', () => {
      inputTextArea.value = '';
      outputTextArea.value = '';
      updateCounts();
      hideValidation();
      showNotification('All fields cleared', 'info');
    });

    // Update example content based on selected format
    function updateExampleContent() {
      const selectedFormat = inputFormatSelect.value;
      const example = defaultExamples[selectedFormat];
      if (example && inputTextArea) {
        inputTextArea.value = example;
        outputTextArea.value = '';
        updateCounts();
        hideValidation();
      }
    }

    // Update info section based on selected format
    function updateInfoSection() {
      const selectedFormat = inputFormatSelect.value;
      const info = formatInfo[selectedFormat];
      
      if (!info || !infoSection) return;
      
      infoSection.innerHTML = `<div class="info-header">
  <div class="info-header-icon">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 36px; height: 36px;">
      <path d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
    </svg>
  </div>
  <div>
    <h2 class="info-title">${info.title}</h2>
    <p class="info-tagline">Transform and validate ${selectedFormat.toUpperCase()} data with ease</p>
  </div>
</div>

<div class="info-grid">
  <div class="info-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <circle cx="12" cy="12" r="10"/>
        <path d="M12 16v-4M12 8h.01"/>
      </svg>
    </div>
    <h3 class="card-title">What is it?</h3>
    <p class="card-content">${info.description}</p>
  </div>
  
  <div class="info-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <path d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
      </svg>
    </div>
    <h3 class="card-title">Syntax</h3>
    <p class="card-content">${info.syntax}</p>
  </div>
  
  <div class="info-card highlight-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
    </div>
    <h3 class="card-title">Key Features</h3>
    <ul class="card-list">
      ${info.features.map(feature => `<li>${feature}</li>`).join('')}
    </ul>
  </div>
  
  <div class="info-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
    </div>
    <h3 class="card-title">History</h3>
    <p class="card-content">${info.history}</p>
  </div>
</div>

<div class="example-showcase">
  <h3 class="showcase-title">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 28px; height: 28px;">
      <path d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
    </svg>
    Example Conversion
  </h3>
  <div class="example-grid">
    <div class="example-panel">
      <div class="example-label">Input (${selectedFormat})</div>
      <code class="example-code">${escapeHtml(info.example.input)}</code>
    </div>
    <div class="example-arrow">→</div>
    <div class="example-panel">
      <div class="example-label">Output (JSON)</div>
      <code class="example-code">${escapeHtml(info.example.output)}</code>
    </div>
  </div>
</div>`;
    }

    function escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Show/hide validation message
    function showValidation(message: string, type: 'success' | 'error' | 'warning') {
      if (!validationMessage) return;
      
      validationMessage.textContent = message;
      validationMessage.className = `validation-message ${type}`;
      validationMessage.classList.remove('hidden');
    }

    function hideValidation() {
      if (!validationMessage) return;
      validationMessage.classList.add('hidden');
    }

    // Notification system
    function showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info') {
      const existing = document.querySelector('.notification');
      if (existing) {
        existing.remove();
      }

      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => notification.classList.add('show'), 10);

      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }

    // Update info and example when format changes
    inputFormatSelect?.addEventListener('change', () => {
      updateInfoSection();
      updateExampleContent();
    });

    // Update counts on input
    inputTextArea?.addEventListener('input', () => {
      updateCounts();
      hideValidation();
    });

    // Initialize with default format
    updateExampleContent();
    updateCounts();
    updateInfoSection();
  </script>

  <style is:global>
    .json-formatter-wrapper {
      padding-top: 8rem;
      padding-bottom: 4rem;
      background: #f8f9fa;
      min-height: 100vh;
    }

    .dark .json-formatter-wrapper {
      background: rgb(3, 7, 18);
    }

    .json-container {
      background: white;
      border-radius: 12px;
      padding: 40px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }

    .dark .json-container {
      background: rgb(17, 24, 39);
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }

    .page-title {
      font-size: 36px;
      font-weight: 700;
      text-align: center;
      margin-bottom: 12px;
      color: #2c3e50;
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .dark .page-title {
      background: linear-gradient(135deg, #ec4899 0%, #f43f5e 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .page-subtitle {
      text-align: center;
      font-size: 16px;
      color: #7f8c8d;
      margin-bottom: 32px;
    }

    .dark .page-subtitle {
      color: rgb(156, 163, 175);
    }

    .type-selector {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
      margin-bottom: 24px;
    }

    .selector-label {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 16px;
      font-weight: 600;
      color: #2c3e50;
    }

    .dark .selector-label {
      color: rgb(243, 244, 246);
    }

    .selector-icon {
      width: 20px;
      height: 20px;
      color: #f093fb;
    }

    .dark .selector-icon {
      color: #ec4899;
    }

    .type-select {
      padding: 10px 16px;
      border-radius: 8px;
      border: 2px solid #e1e8ed;
      background: white;
      color: #2c3e50;
      font-size: 15px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
      min-width: 220px;
    }

    .dark .type-select {
      border-color: rgb(55, 65, 81);
      background: rgb(31, 41, 55);
      color: rgb(243, 244, 246);
    }

    .type-select:hover {
      border-color: #f093fb;
    }

    .dark .type-select:hover {
      border-color: #ec4899;
    }

    .type-select:focus {
      outline: none;
      border-color: #f093fb;
      box-shadow: 0 0 0 3px rgba(240, 147, 251, 0.1);
    }

    .dark .type-select:focus {
      border-color: #ec4899;
      box-shadow: 0 0 0 3px rgba(236, 72, 153, 0.1);
    }

    .controls {
      display: flex;
      justify-content: center;
      gap: 12px;
      margin-bottom: 24px;
      flex-wrap: wrap;
    }

    .btn {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 12px 20px;
      border: none;
      border-radius: 8px;
      font-size: 15px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .btn-icon {
      width: 18px;
      height: 18px;
    }

    .btn-primary {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      color: white;
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, #e082ea 0%, #e4465b 100%);
    }

    .btn-secondary {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      color: white;
    }

    .btn-secondary:hover {
      background: linear-gradient(135deg, #3f9bed 0%, #00d9ed 100%);
    }

    .btn-info {
      background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
      color: white;
    }

    .btn-info:hover {
      background: linear-gradient(135deg, #32d86a 0%, #27e8c6 100%);
    }

    .btn-clear {
      background: #e9ecef;
      color: #495057;
    }

    .dark .btn-clear {
      background: rgb(55, 65, 81);
      color: rgb(209, 213, 219);
    }

    .btn-clear:hover {
      background: #dee2e6;
    }

    .dark .btn-clear:hover {
      background: rgb(75, 85, 99);
    }

    .validation-message {
      padding: 12px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 14px;
      font-weight: 500;
      text-align: center;
      transition: all 0.3s;
    }

    .validation-message.hidden {
      display: none;
    }

    .validation-message.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .dark .validation-message.success {
      background: rgba(34, 197, 94, 0.2);
      color: rgb(134, 239, 172);
      border-color: rgb(34, 197, 94);
    }

    .validation-message.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }

    .dark .validation-message.error {
      background: rgba(239, 68, 68, 0.2);
      color: rgb(252, 165, 165);
      border-color: rgb(239, 68, 68);
    }

    .validation-message.warning {
      background: #fff3cd;
      color: #856404;
      border: 1px solid #ffeaa7;
    }

    .dark .validation-message.warning {
      background: rgba(251, 191, 36, 0.2);
      color: rgb(253, 224, 71);
      border-color: rgb(251, 191, 36);
    }

    .textareas-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 24px;
      margin-bottom: 48px;
    }

    @media (max-width: 968px) {
      .textareas-container {
        grid-template-columns: 1fr;
      }
    }

    .textarea-wrapper {
      display: flex;
      flex-direction: column;
    }

    .textarea-label {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 16px;
      font-weight: 600;
      color: #2c3e50;
      margin-bottom: 12px;
    }

    .dark .textarea-label {
      color: rgb(243, 244, 246);
    }

    .label-icon {
      width: 20px;
      height: 20px;
      color: #f093fb;
    }

    .dark .label-icon {
      color: #ec4899;
    }

    .textarea {
      width: 100%;
      padding: 16px;
      border: 2px solid #e1e8ed;
      border-radius: 8px;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 14px;
      line-height: 1.6;
      resize: vertical;
      background: #f8f9fa;
      color: #2c3e50;
      transition: border-color 0.2s;
    }

    .dark .textarea {
      background: rgb(31, 41, 55);
      border-color: rgb(55, 65, 81);
      color: rgb(229, 231, 235);
    }

    .textarea:focus {
      outline: none;
      border-color: #f093fb;
    }

    .dark .textarea:focus {
      border-color: #ec4899;
    }

    .textarea::placeholder {
      color: #adb5bd;
    }

    .dark .textarea::placeholder {
      color: rgb(107, 114, 128);
    }

    .textarea[readonly] {
      background: #e9ecef;
      cursor: default;
    }

    .dark .textarea[readonly] {
      background: rgb(17, 24, 39);
    }

    .textarea-info {
      display: flex;
      justify-content: space-between;
      margin-top: 8px;
    }

    .char-count, .line-count {
      font-size: 12px;
      color: #6c757d;
    }

    .dark .char-count,
    .dark .line-count {
      color: rgb(156, 163, 175);
    }

    .info-section {
      background: linear-gradient(135deg, #f093fb15 0%, #f5576c15 100%);
      border-radius: 16px;
      padding: 48px;
      margin-top: 48px;
      border: 1px solid rgba(240, 147, 251, 0.1);
    }

    .dark .info-section {
      background: linear-gradient(135deg, rgba(236, 72, 153, 0.05) 0%, rgba(245, 87, 108, 0.05) 100%);
      border-color: rgba(236, 72, 153, 0.2);
    }

    .info-header {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 40px;
      padding-bottom: 24px;
      border-bottom: 2px solid rgba(240, 147, 251, 0.2);
    }

    .dark .info-header {
      border-bottom-color: rgba(236, 72, 153, 0.3);
    }

    .info-header-icon {
      width: 64px;
      height: 64px;
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      box-shadow: 0 8px 16px rgba(240, 147, 251, 0.3);
    }

    .info-header-icon svg {
      width: 36px;
      height: 36px;
      color: white;
    }

    .info-title {
      font-size: 32px;
      font-weight: 700;
      color: #2c3e50;
      margin: 0;
      line-height: 1.2;
    }

    .dark .info-title {
      color: rgb(243, 244, 246);
    }

    .info-tagline {
      font-size: 16px;
      color: #f093fb;
      margin: 4px 0 0 0;
      font-weight: 500;
    }

    .dark .info-tagline {
      color: #ec4899;
    }

    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 24px;
      margin-bottom: 32px;
    }

    .info-card {
      background: white;
      border-radius: 12px;
      padding: 28px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
      border: 1px solid #e1e8ed;
    }

    .dark .info-card {
      background: rgb(17, 24, 39);
      border-color: rgb(55, 65, 81);
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }

    .info-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 24px rgba(240, 147, 251, 0.15);
    }

    .dark .info-card:hover {
      box-shadow: 0 8px 24px rgba(236, 72, 153, 0.3);
    }

    .highlight-card {
      background: linear-gradient(135deg, #f093fb10 0%, #f5576c10 100%);
      border: 2px solid #f093fb;
    }

    .dark .highlight-card {
      background: linear-gradient(135deg, rgba(236, 72, 153, 0.1) 0%, rgba(245, 87, 108, 0.1) 100%);
      border-color: #ec4899;
    }

    .card-icon {
      width: 48px;
      height: 48px;
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 16px;
    }

    .card-icon svg {
      width: 24px;
      height: 24px;
      color: white;
    }

    .card-title {
      font-size: 20px;
      font-weight: 700;
      color: #2c3e50;
      margin: 0 0 12px 0;
    }

    .dark .card-title {
      color: rgb(243, 244, 246);
    }

    .card-content {
      font-size: 15px;
      line-height: 1.7;
      color: #34495e;
      margin: 0;
    }

    .dark .card-content {
      color: rgb(209, 213, 219);
    }

    .card-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .card-list li {
      font-size: 14px;
      line-height: 1.7;
      color: #34495e;
      margin-bottom: 12px;
      padding-left: 28px;
      position: relative;
    }

    .dark .card-list li {
      color: rgb(209, 213, 219);
    }

    .card-list li::before {
      content: "✓";
      position: absolute;
      left: 0;
      color: #f093fb;
      font-weight: bold;
      font-size: 18px;
    }

    .example-showcase {
      background: white;
      border-radius: 12px;
      padding: 28px;
      border: 2px solid #e1e8ed;
    }

    .dark .example-showcase {
      background: rgb(17, 24, 39);
      border-color: rgb(55, 65, 81);
    }

    .showcase-title {
      display: flex;
      align-items: center;
      gap: 12px;
      font-size: 22px;
      font-weight: 700;
      color: #2c3e50;
      margin: 0 0 24px 0;
    }

    .dark .showcase-title {
      color: rgb(243, 244, 246);
    }

    .showcase-title svg {
      width: 28px;
      height: 28px;
      color: #f093fb;
    }

    .dark .showcase-title svg {
      color: #ec4899;
    }

    .example-grid {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      gap: 20px;
      align-items: center;
    }

    @media (max-width: 768px) {
      .example-grid {
        grid-template-columns: 1fr;
        gap: 16px;
      }
      .example-arrow {
        transform: rotate(90deg);
      }
    }

    .example-panel {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 16px;
      border: 1px solid #dee2e6;
    }

    .dark .example-panel {
      background: rgb(31, 41, 55);
      border-color: rgb(55, 65, 81);
    }

    .example-label {
      font-size: 12px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      color: #f093fb;
      margin-bottom: 8px;
    }

    .dark .example-label {
      color: #ec4899;
    }

    .example-code {
      display: block;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 13px;
      line-height: 1.6;
      color: #2c3e50;
      word-break: break-all;
      white-space: pre-wrap;
    }

    .dark .example-code {
      color: rgb(229, 231, 235);
    }

    .example-arrow {
      font-size: 32px;
      font-weight: bold;
      color: #f093fb;
      text-align: center;
    }

    .dark .example-arrow {
      color: #ec4899;
    }

    /* Notification styles */
    .notification {
      position: fixed;
      top: 100px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 1000;
      opacity: 0;
      transform: translateX(400px);
      transition: all 0.3s ease;
    }

    .notification.show {
      opacity: 1;
      transform: translateX(0);
    }

    .notification-success {
      background: #d4edda;
      color: #155724;
      border-left: 4px solid #28a745;
    }

    .dark .notification-success {
      background: rgba(34, 197, 94, 0.2);
      color: rgb(134, 239, 172);
      border-left-color: rgb(34, 197, 94);
    }

    .notification-error {
      background: #f8d7da;
      color: #721c24;
      border-left: 4px solid #dc3545;
    }

    .dark .notification-error {
      background: rgba(239, 68, 68, 0.2);
      color: rgb(252, 165, 165);
      border-left-color: rgb(239, 68, 68);
    }

    .notification-warning {
      background: #fff3cd;
      color: #856404;
      border-left: 4px solid #ffc107;
    }

    .dark .notification-warning {
      background: rgba(251, 191, 36, 0.2);
      color: rgb(253, 224, 71);
      border-left-color: rgb(251, 191, 36);
    }

    .notification-info {
      background: #d1ecf1;
      color: #0c5460;
      border-left: 4px solid #17a2b8;
    }

    .dark .notification-info {
      background: rgba(14, 165, 233, 0.2);
      color: rgb(125, 211, 252);
      border-left-color: rgb(14, 165, 233);
    }
  </style>
</Layout>

