---
import Layout from '../../layouts/Layout.astro';

const pageTitle = 'String Escape/Unescape Tool';
const pageDescription = 'Escape and unescape strings for URL, HTML, JavaScript/JSON, and XML formats';
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="escape-wrapper">
    <div class="container mx-auto px-4">
      <main class="escape-container">
        <h1 class="page-title">String Escape/Unescape Tool</h1>
        <p class="page-subtitle">Encode and decode strings for various formats</p>
        
        <div class="type-selector">
          <label for="escape-type" class="selector-label">
            <svg class="selector-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
            </svg>
            Escape Type:
          </label>
          <select id="escape-type" class="type-select">
            <option value="url">URL Encoding</option>
            <option value="html">HTML Entities</option>
            <option value="javascript">JavaScript/JSON String</option>
            <option value="xml">XML</option>
          </select>
        </div>
        
        <div class="controls">
          <button id="escape-btn" class="btn btn-primary">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            Escape →
          </button>
          <button id="unescape-btn" class="btn btn-secondary">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            ← Unescape
          </button>
          <button id="clear-btn" class="btn btn-clear">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M18 6L6 18M6 6l12 12"/>
            </svg>
            Clear All
          </button>
        </div>
        
        <div class="textareas-container">
          <div class="textarea-wrapper">
            <label for="original-text" class="textarea-label">
              <svg class="label-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                <path d="M14 2v6h6M16 13H8M16 17H8M10 9H8"/>
              </svg>
              Original String
            </label>
            <textarea
              id="original-text"
              class="textarea"
              placeholder="Enter text to escape..."
              rows="30"
            ></textarea>
            <div class="textarea-info">
              <span id="original-length" class="char-count">0 characters</span>
            </div>
          </div>
          
          <div class="textarea-wrapper">
            <label for="escaped-text" class="textarea-label">
              <svg class="label-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
              </svg>
              Escaped String
            </label>
            <textarea
              id="escaped-text"
              class="textarea"
              placeholder="Escaped text will appear here..."
              rows="30"
            ></textarea>
            <div class="textarea-info">
              <span id="escaped-length" class="char-count">0 characters</span>
            </div>
          </div>
        </div>
        
        <div class="info-section" id="info-section">
          <!-- Dynamic content will be inserted here -->
        </div>
      </main>
    </div>
  </div>

  <script>
    // Type definitions
    interface EscapeTypeInfo {
      title: string;
      description: string;
      howItWorks: string;
      useCases: string[];
      history: string;
      example: { original: string; escaped: string };
    }

    // Default examples for each type
    const defaultExamples: Record<string, string> = {
      url: 'https://example.com/search?q=Hello World&category=greetings&lang=en',
      html: '<div class="greeting">\n  <h1>Hello & Welcome!</h1>\n  <p>Use "quotes" and \'apostrophes\' freely</p>\n</div>',
      javascript: 'const message = "Hello, World!";\nconst greeting = \'Welcome to JavaScript\';\nconsole.log(`Line 1\nLine 2\nLine 3`);',
      xml: '<?xml version="1.0"?>\n<greeting language="en">\n  <message>Hello & Welcome!</message>\n  <author name="John O\'Brien"/>\n</greeting>'
    };

    // Information for each escape type
    const escapeTypeInfo: Record<string, EscapeTypeInfo> = {
      url: {
        title: 'URL Encoding (Percent Encoding)',
        description: 'URL encoding, also known as percent encoding, is a mechanism for encoding special characters in URLs so they can be safely transmitted over the Internet. It replaces unsafe ASCII characters with a "%" followed by two hexadecimal digits representing the character\'s ASCII code.',
        howItWorks: 'Characters that are not allowed in URLs (spaces, special characters, non-ASCII characters) are converted to percent-encoded format. For example, a space becomes %20, and an ampersand (&) becomes %26. Letters, numbers, and a few special characters (-, _, ., ~) are left unchanged.',
        useCases: [
          'Encoding query string parameters in URLs',
          'Embedding user input in URLs safely',
          'Creating data URIs and API requests',
          'Handling international characters in URLs',
          'Form data submission via GET requests'
        ],
        history: 'URL encoding was first defined in RFC 1738 (1994) by Tim Berners-Lee and others as part of the Uniform Resource Locators (URL) specification. It has been updated in RFC 3986 (2005), which is the current standard for URI syntax. The encoding scheme was necessary because URLs were originally designed to use only ASCII characters, but the web needed to support international characters and special symbols.',
        example: {
          original: 'Hello World! How are you?',
          escaped: 'Hello%20World!%20How%20are%20you%3F'
        }
      },
      html: {
        title: 'HTML Entity Encoding',
        description: 'HTML entity encoding converts special characters into their HTML entity equivalents to prevent them from being interpreted as HTML markup. This is crucial for displaying text that contains HTML syntax characters and for preventing cross-site scripting (XSS) attacks.',
        howItWorks: 'Special characters are replaced with entity references that start with & and end with ;. There are two types: named entities (like &lt; for <) and numeric entities (like &#60; for <). Common conversions include < to &lt;, > to &gt;, & to &amp;, " to &quot;, and \' to &#39;.',
        useCases: [
          'Preventing XSS (Cross-Site Scripting) attacks',
          'Displaying HTML code as text on web pages',
          'Safely embedding user-generated content',
          'Preserving formatting in HTML attributes',
          'Displaying special symbols and characters'
        ],
        history: 'HTML entities were introduced with HTML 2.0 (RFC 1866) in 1995 by Tim Berners-Lee and Dan Connolly at the W3C. The system was expanded significantly in HTML 4.0 (1997) to include a wide range of special characters, mathematical symbols, and international characters. The concept allows HTML to display characters that would otherwise be interpreted as markup.',
        example: {
          original: '<div class="test">Hello & "Goodbye"</div>',
          escaped: '&lt;div class=&quot;test&quot;&gt;Hello &amp; &quot;Goodbye&quot;&lt;/div&gt;'
        }
      },
      javascript: {
        title: 'JavaScript/JSON String Escaping',
        description: 'JavaScript string escaping converts special characters into escape sequences so they can be safely included in string literals. This is essential for embedding strings in JavaScript code and for creating valid JSON data.',
        howItWorks: 'Special characters are prefixed with a backslash. Common escapes include newline, tab, double quote, single quote, and backslash itself. Unicode characters can be represented with unicode escape sequences.',
        useCases: [
          'Creating valid JSON data',
          'Embedding strings in JavaScript code',
          'Safely including user input in scripts',
          'Working with template strings and dynamic code',
          'API responses and data serialization'
        ],
        history: 'JavaScript escape sequences were defined when JavaScript was created by Brendan Eich at Netscape in 1995. The syntax was influenced by C and Java string escaping conventions. JSON (JavaScript Object Notation), created by Douglas Crockford around 2001, adopted the same escape sequence rules. JSON was standardized in RFC 4627 (2006) and later updated in RFC 8259 (2017).',
        example: {
          original: 'He said "Hello"\\nand then left',
          escaped: 'He said \\\\"Hello\\\\"\\\\nand then left'
        }
      },
      xml: {
        title: 'XML Entity Encoding',
        description: 'XML entity encoding converts special characters into their XML entity equivalents to ensure valid XML documents. Similar to HTML entities but with stricter rules, as XML is a strict markup language that requires proper escaping of all special characters.',
        howItWorks: 'XML defines five predefined entities that must be escaped: less-than becomes &lt;, greater-than becomes &gt;, ampersand becomes &amp;, double quote becomes &quot;, and apostrophe becomes &apos;. Unlike HTML, XML does not support named entities beyond these five unless they are explicitly defined in the DTD (Document Type Definition).',
        useCases: [
          'Creating valid XML documents',
          'SOAP web service requests and responses',
          'Configuration files (Maven, Ant, etc.)',
          'RSS/Atom feeds',
          'SVG graphics with embedded text'
        ],
        history: 'XML (Extensible Markup Language) was developed by the W3C XML Working Group, led by Jon Bosak, and became a W3C Recommendation in February 1998 (XML 1.0). The entity encoding rules were adapted from SGML (Standard Generalized Markup Language, ISO 8879:1986) but simplified. XML 1.1 was released in 2004 to address some Unicode character handling issues.',
        example: {
          original: '<user name="John & Jane">',
          escaped: '&lt;user name=&quot;John &amp; Jane&quot;&gt;'
        }
      }
    };

    // Get DOM elements
    const escapeTypeSelect = document.getElementById('escape-type') as HTMLSelectElement;
    const originalTextArea = document.getElementById('original-text') as HTMLTextAreaElement;
    const escapedTextArea = document.getElementById('escaped-text') as HTMLTextAreaElement;
    const escapeBtn = document.getElementById('escape-btn');
    const unescapeBtn = document.getElementById('unescape-btn');
    const clearBtn = document.getElementById('clear-btn');
    const originalLength = document.getElementById('original-length');
    const escapedLength = document.getElementById('escaped-length');
    const infoSection = document.getElementById('info-section');

    // Update character counts
    function updateCharCounts() {
      if (originalLength) originalLength.textContent = `${originalTextArea.value.length} characters`;
      if (escapedLength) escapedLength.textContent = `${escapedTextArea.value.length} characters`;
    }

    // Escape functions for each type
    function escapeURL(str: string): string {
      return encodeURIComponent(str);
    }

    function unescapeURL(str: string): string {
      return decodeURIComponent(str);
    }

    function escapeHTML(str: string): string {
      const htmlEntities: Record<string, string> = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };
      return str.replace(/[&<>"']/g, char => htmlEntities[char] || char);
    }

    function unescapeHTML(str: string): string {
      const textarea = document.createElement('textarea');
      textarea.innerHTML = str;
      return textarea.value;
    }

    function escapeJavaScript(str: string): string {
      const jsEscapes: Record<string, string> = {
        '\\': '\\\\',
        '"': '\\"',
        "'": "\\'",
        '\n': '\\n',
        '\r': '\\r',
        '\t': '\\t',
        '\b': '\\b',
        '\f': '\\f'
      };
      return str.replace(/[\\"'\n\r\t\b\f]/g, char => jsEscapes[char] || char);
    }

    function unescapeJavaScript(str: string): string {
      return str.replace(/\\(.)/g, (match, char) => {
        const unescapes: Record<string, string> = {
          'n': '\n',
          'r': '\r',
          't': '\t',
          'b': '\b',
          'f': '\f',
          '\\': '\\',
          '"': '"',
          "'": "'"
        };
        return unescapes[char] || char;
      });
    }

    function escapeXML(str: string): string {
      const xmlEntities: Record<string, string> = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&apos;'
      };
      return str.replace(/[&<>"']/g, char => xmlEntities[char] || char);
    }

    function unescapeXML(str: string): string {
      const xmlEntities: Record<string, string> = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&apos;': "'"
      };
      return str.replace(/&(?:amp|lt|gt|quot|apos);/g, entity => xmlEntities[entity] || entity);
    }

    // Update example content based on selected type
    function updateExampleContent() {
      const selectedType = escapeTypeSelect.value;
      const example = defaultExamples[selectedType];
      if (example && originalTextArea) {
        originalTextArea.value = example;
        escapedTextArea.value = '';
        updateCharCounts();
      }
    }

    // Update info section based on selected type
    function updateInfoSection() {
      const selectedType = escapeTypeSelect.value;
      const selectedFormat = selectedType;
      const info = escapeTypeInfo[selectedType];
      
      if (!info || !infoSection) return;

      const isDark = document.documentElement.classList.contains('dark');
      
      infoSection.innerHTML = `<div class="info-header">
  <div class="info-header-icon">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 36px; height: 36px;">
      <path d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
    </svg>
  </div>
  <div>
    <h2 class="info-title">${info.title}</h2>
    <p class="info-tagline">Essential for ${selectedFormat.toUpperCase()} development and data interchange</p>
  </div>
</div>

<div class="info-grid">
  <div class="info-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <circle cx="12" cy="12" r="10"/>
        <path d="M12 16v-4M12 8h.01"/>
      </svg>
    </div>
    <h3 class="card-title">What is it?</h3>
    <p class="card-content">${info.description}</p>
  </div>
  
  <div class="info-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
      </svg>
    </div>
    <h3 class="card-title">How It Works</h3>
    <p class="card-content">${info.howItWorks}</p>
  </div>
  
  <div class="info-card highlight-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
    </div>
    <h3 class="card-title">Common Use Cases</h3>
    <ul class="card-list">
      ${info.useCases.map(useCase => `<li>${useCase}</li>`).join('')}
    </ul>
  </div>
  
  <div class="info-card">
    <div class="card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 24px; height: 24px;">
        <path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
    </div>
    <h3 class="card-title">History</h3>
    <p class="card-content">${info.history}</p>
  </div>
</div>

<div class="example-showcase">
  <h3 class="showcase-title">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="width: 28px; height: 28px;">
      <path d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
    </svg>
    Example Transformation
  </h3>
  <div class="example-grid">
    <div class="example-panel">
      <div class="example-label">Original</div>
      <code class="example-code">${escapeHTML(info.example.original)}</code>
    </div>
    <div class="example-arrow">→</div>
    <div class="example-panel">
      <div class="example-label">Escaped</div>
      <code class="example-code">${escapeHTML(info.example.escaped)}</code>
    </div>
  </div>
</div>`;
    }

    // Escape button handler
    escapeBtn?.addEventListener('click', () => {
      try {
        const text = originalTextArea.value;
        if (!text) {
          showNotification('Please enter some text to escape', 'warning');
          return;
        }
        
        const escapeType = escapeTypeSelect.value;
        let escaped = '';
        
        switch (escapeType) {
          case 'url':
            escaped = escapeURL(text);
            break;
          case 'html':
            escaped = escapeHTML(text);
            break;
          case 'javascript':
            escaped = escapeJavaScript(text);
            break;
          case 'xml':
            escaped = escapeXML(text);
            break;
        }
        
        escapedTextArea.value = escaped;
        updateCharCounts();
        showNotification('Text escaped successfully!', 'success');
      } catch (error) {
        showNotification('Error escaping text: ' + (error as Error).message, 'error');
      }
    });

    // Unescape button handler
    unescapeBtn?.addEventListener('click', () => {
      try {
        const text = escapedTextArea.value;
        if (!text) {
          showNotification('Please enter escaped text to unescape', 'warning');
          return;
        }
        
        const escapeType = escapeTypeSelect.value;
        let unescaped = '';
        
        switch (escapeType) {
          case 'url':
            unescaped = unescapeURL(text);
            break;
          case 'html':
            unescaped = unescapeHTML(text);
            break;
          case 'javascript':
            unescaped = unescapeJavaScript(text);
            break;
          case 'xml':
            unescaped = unescapeXML(text);
            break;
        }
        
        originalTextArea.value = unescaped;
        updateCharCounts();
        showNotification('Text unescaped successfully!', 'success');
      } catch (error) {
        showNotification('Error unescaping text: ' + (error as Error).message, 'error');
      }
    });

    // Clear button handler
    clearBtn?.addEventListener('click', () => {
      originalTextArea.value = '';
      escapedTextArea.value = '';
      updateCharCounts();
      showNotification('All fields cleared', 'info');
    });

    // Update info and example when type changes
    escapeTypeSelect?.addEventListener('change', () => {
      updateInfoSection();
      updateExampleContent();
    });

    // Update character counts on input
    originalTextArea?.addEventListener('input', updateCharCounts);
    escapedTextArea?.addEventListener('input', updateCharCounts);

    // Notification system
    function showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info') {
      const existing = document.querySelector('.notification');
      if (existing) {
        existing.remove();
      }

      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => notification.classList.add('show'), 10);

      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }

    // Initialize
    updateExampleContent();
    updateCharCounts();
    updateInfoSection();
  </script>

  <style is:global>
    .escape-wrapper {
      padding-top: 8rem;
      padding-bottom: 4rem;
      background: #f8f9fa;
      min-height: 100vh;
    }

    .dark .escape-wrapper {
      background: rgb(3, 7, 18);
    }

    .escape-container {
      background: white;
      border-radius: 12px;
      padding: 40px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }

    .dark .escape-container {
      background: rgb(17, 24, 39);
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }

    .page-title {
      font-size: 36px;
      font-weight: 700;
      text-align: center;
      margin-bottom: 12px;
      color: #2c3e50;
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .dark .page-title {
      background: linear-gradient(135deg, #10b981 0%, #34d399 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .page-subtitle {
      text-align: center;
      font-size: 16px;
      color: #7f8c8d;
      margin-bottom: 32px;
    }

    .dark .page-subtitle {
      color: rgb(156, 163, 175);
    }

    .type-selector {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
      margin-bottom: 24px;
    }

    .selector-label {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 16px;
      font-weight: 600;
      color: #2c3e50;
    }

    .dark .selector-label {
      color: rgb(243, 244, 246);
    }

    .selector-icon {
      width: 20px;
      height: 20px;
      color: #11998e;
    }

    .dark .selector-icon {
      color: #10b981;
    }

    .type-select {
      padding: 10px 16px;
      border-radius: 8px;
      border: 2px solid #e1e8ed;
      background: white;
      color: #2c3e50;
      font-size: 15px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
      min-width: 220px;
    }

    .dark .type-select {
      border-color: rgb(55, 65, 81);
      background: rgb(31, 41, 55);
      color: rgb(243, 244, 246);
    }

    .type-select:hover {
      border-color: #11998e;
    }

    .dark .type-select:hover {
      border-color: #10b981;
    }

    .type-select:focus {
      outline: none;
      border-color: #11998e;
      box-shadow: 0 0 0 3px rgba(17, 153, 142, 0.1);
    }

    .dark .type-select:focus {
      border-color: #10b981;
      box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
    }

    .controls {
      display: flex;
      justify-content: center;
      gap: 16px;
      margin-bottom: 32px;
      flex-wrap: wrap;
    }

    .btn {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .btn-icon {
      width: 20px;
      height: 20px;
    }

    .btn-primary {
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
      color: white;
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, #0f8a80 0%, #2fd96d 100%);
    }

    .btn-secondary {
      background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
      color: white;
    }

    .btn-secondary:hover {
      background: linear-gradient(135deg, #e9608a 0%, #edcf30 100%);
    }

    .btn-clear {
      background: #e9ecef;
      color: #495057;
    }

    .dark .btn-clear {
      background: rgb(55, 65, 81);
      color: rgb(209, 213, 219);
    }

    .btn-clear:hover {
      background: #dee2e6;
    }

    .dark .btn-clear:hover {
      background: rgb(75, 85, 99);
    }

    .textareas-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 24px;
      margin-bottom: 48px;
    }

    @media (max-width: 968px) {
      .textareas-container {
        grid-template-columns: 1fr;
      }
    }

    .textarea-wrapper {
      display: flex;
      flex-direction: column;
    }

    .textarea-label {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 16px;
      font-weight: 600;
      color: #2c3e50;
      margin-bottom: 12px;
    }

    .dark .textarea-label {
      color: rgb(243, 244, 246);
    }

    .label-icon {
      width: 20px;
      height: 20px;
      color: #11998e;
    }

    .dark .label-icon {
      color: #10b981;
    }

    .textarea {
      width: 100%;
      padding: 16px;
      border: 2px solid #e1e8ed;
      border-radius: 8px;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 14px;
      line-height: 1.6;
      resize: vertical;
      background: #f8f9fa;
      color: #2c3e50;
      transition: border-color 0.2s;
    }

    .dark .textarea {
      background: rgb(31, 41, 55);
      border-color: rgb(55, 65, 81);
      color: rgb(229, 231, 235);
    }

    .textarea:focus {
      outline: none;
      border-color: #11998e;
    }

    .dark .textarea:focus {
      border-color: #10b981;
    }

    .textarea::placeholder {
      color: #adb5bd;
    }

    .dark .textarea::placeholder {
      color: rgb(107, 114, 128);
    }

    .textarea-info {
      display: flex;
      justify-content: flex-end;
      margin-top: 8px;
    }

    .char-count {
      font-size: 12px;
      color: #6c757d;
    }

    .dark .char-count {
      color: rgb(156, 163, 175);
    }

    .info-section {
      background: linear-gradient(135deg, #11998e15 0%, #38ef7d15 100%);
      border-radius: 16px;
      padding: 48px;
      margin-top: 48px;
      border: 1px solid rgba(17, 153, 142, 0.1);
    }

    .dark .info-section {
      background: linear-gradient(135deg, rgba(16, 185, 129, 0.05) 0%, rgba(56, 239, 125, 0.05) 100%);
      border-color: rgba(16, 185, 129, 0.2);
    }

    .info-header {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 40px;
      padding-bottom: 24px;
      border-bottom: 2px solid rgba(17, 153, 142, 0.2);
    }

    .dark .info-header {
      border-bottom-color: rgba(16, 185, 129, 0.3);
    }

    .info-header-icon {
      width: 64px;
      height: 64px;
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      box-shadow: 0 8px 16px rgba(17, 153, 142, 0.3);
    }

    .info-header-icon svg {
      width: 36px;
      height: 36px;
      color: white;
    }

    .info-title {
      font-size: 32px;
      font-weight: 700;
      color: #2c3e50;
      margin: 0;
      line-height: 1.2;
    }

    .dark .info-title {
      color: rgb(243, 244, 246);
    }

    .info-tagline {
      font-size: 16px;
      color: #11998e;
      margin: 4px 0 0 0;
      font-weight: 500;
    }

    .dark .info-tagline {
      color: #10b981;
    }

    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 24px;
      margin-bottom: 32px;
    }

    .info-card {
      background: white;
      border-radius: 12px;
      padding: 28px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
      border: 1px solid #e1e8ed;
    }

    .dark .info-card {
      background: rgb(17, 24, 39);
      border-color: rgb(55, 65, 81);
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }

    .info-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 24px rgba(17, 153, 142, 0.15);
    }

    .dark .info-card:hover {
      box-shadow: 0 8px 24px rgba(16, 185, 129, 0.3);
    }

    .highlight-card {
      background: linear-gradient(135deg, #11998e10 0%, #38ef7d10 100%);
      border: 2px solid #11998e;
    }

    .dark .highlight-card {
      background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(56, 239, 125, 0.1) 100%);
      border-color: #10b981;
    }

    .card-icon {
      width: 48px;
      height: 48px;
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 16px;
    }

    .card-icon svg {
      width: 24px;
      height: 24px;
      color: white;
    }

    .card-title {
      font-size: 20px;
      font-weight: 700;
      color: #2c3e50;
      margin: 0 0 12px 0;
    }

    .dark .card-title {
      color: rgb(243, 244, 246);
    }

    .card-content {
      font-size: 15px;
      line-height: 1.7;
      color: #34495e;
      margin: 0;
    }

    .dark .card-content {
      color: rgb(209, 213, 219);
    }

    .card-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .card-list li {
      font-size: 14px;
      line-height: 1.7;
      color: #34495e;
      margin-bottom: 12px;
      padding-left: 28px;
      position: relative;
    }

    .dark .card-list li {
      color: rgb(209, 213, 219);
    }

    .card-list li::before {
      content: "✓";
      position: absolute;
      left: 0;
      color: #11998e;
      font-weight: bold;
      font-size: 18px;
    }

    .example-showcase {
      background: white;
      border-radius: 12px;
      padding: 28px;
      border: 2px solid #e1e8ed;
    }

    .dark .example-showcase {
      background: rgb(17, 24, 39);
      border-color: rgb(55, 65, 81);
    }

    .showcase-title {
      display: flex;
      align-items: center;
      gap: 12px;
      font-size: 22px;
      font-weight: 700;
      color: #2c3e50;
      margin: 0 0 24px 0;
    }

    .dark .showcase-title {
      color: rgb(243, 244, 246);
    }

    .showcase-title svg {
      width: 28px;
      height: 28px;
      color: #11998e;
    }

    .dark .showcase-title svg {
      color: #10b981;
    }

    .example-grid {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      gap: 20px;
      align-items: center;
    }

    @media (max-width: 768px) {
      .example-grid {
        grid-template-columns: 1fr;
        gap: 16px;
      }
      .example-arrow {
        transform: rotate(90deg);
      }
    }

    .example-panel {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 16px;
      border: 1px solid #dee2e6;
    }

    .dark .example-panel {
      background: rgb(31, 41, 55);
      border-color: rgb(55, 65, 81);
    }

    .example-label {
      font-size: 12px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      color: #11998e;
      margin-bottom: 8px;
    }

    .dark .example-label {
      color: #10b981;
    }

    .example-code {
      display: block;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 13px;
      line-height: 1.6;
      color: #2c3e50;
      word-break: break-all;
      white-space: pre-wrap;
    }

    .dark .example-code {
      color: rgb(229, 231, 235);
    }

    .example-arrow {
      font-size: 32px;
      font-weight: bold;
      color: #11998e;
      text-align: center;
    }

    .dark .example-arrow {
      color: #10b981;
    }

    /* Notification styles */
    .notification {
      position: fixed;
      top: 100px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 1000;
      opacity: 0;
      transform: translateX(400px);
      transition: all 0.3s ease;
    }

    .notification.show {
      opacity: 1;
      transform: translateX(0);
    }

    .notification-success {
      background: #d4edda;
      color: #155724;
      border-left: 4px solid #28a745;
    }

    .dark .notification-success {
      background: rgba(34, 197, 94, 0.2);
      color: rgb(134, 239, 172);
      border-left-color: rgb(34, 197, 94);
    }

    .notification-error {
      background: #f8d7da;
      color: #721c24;
      border-left: 4px solid #dc3545;
    }

    .dark .notification-error {
      background: rgba(239, 68, 68, 0.2);
      color: rgb(252, 165, 165);
      border-left-color: rgb(239, 68, 68);
    }

    .notification-warning {
      background: #fff3cd;
      color: #856404;
      border-left: 4px solid #ffc107;
    }

    .dark .notification-warning {
      background: rgba(251, 191, 36, 0.2);
      color: rgb(253, 224, 71);
      border-left-color: rgb(251, 191, 36);
    }

    .notification-info {
      background: #d1ecf1;
      color: #0c5460;
      border-left: 4px solid #17a2b8;
    }

    .dark .notification-info {
      background: rgba(14, 165, 233, 0.2);
      color: rgb(125, 211, 252);
      border-left-color: rgb(14, 165, 233);
    }
  </style>
</Layout>

