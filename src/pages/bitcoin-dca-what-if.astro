---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Bitcoin DCA What-If Calculator">
  <div class="pt-40">
    <div class="container mx-auto px-4 py-6 bg-orange-500 text-white shadow-lg rounded-lg">
      <h1 class="text-3xl font-bold">â‚¿ Bitcoin DCA What-If Calculator</h1>
      <p class="max-w-3xl mt-2">Explore historical dollar-cost averaging scenarios and see how different strategies would have performed with real Bitcoin price data from 2010 to today.</p>
    </div>
  </div>

  <main class="container mx-auto px-4 py-8">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-2xl font-semibold mb-6">Calculator Settings</h2>
        
        <form id="dcaForm" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="startDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Start Date
              </label>
              <input 
                type="date" 
                id="startDate" 
                name="startDate"
                min="2010-08-18"
                max="2025-12-31"
                value="2020-01-01"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
            
            <div>
              <label for="purchaseAmount" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Purchase Amount ($)
              </label>
              <input 
                type="number" 
                id="purchaseAmount" 
                name="purchaseAmount"
                min="1"
                step="0.01"
                value="100"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
            
            <div>
              <label for="period" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Purchase Period
              </label>
              <select 
                id="period" 
                name="period"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
              >
                <option value="daily">Daily</option>
                <option value="weekly" selected>Weekly</option>
                <option value="monthly">Monthly</option>
              </select>
            </div>
            
            <div id="priceStrategyDiv">
              <label for="priceStrategy" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Price Strategy (Weekly/Monthly)
              </label>
              <select 
                id="priceStrategy" 
                name="priceStrategy"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
              >
                <option value="average" selected>Average Price</option>
                <option value="highest">Highest Price</option>
                <option value="lowest">Lowest Price</option>
              </select>
            </div>
          </div>
          
          <div class="flex justify-center">
            <button 
              type="submit" 
              class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg shadow-md transition duration-200"
            >
              Calculate DCA Results
            </button>
          </div>
        </form>
      </div>
      
      <div id="loading" class="hidden text-center py-8">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <p class="mt-2 text-gray-600 dark:text-gray-400">Calculating results...</p>
      </div>
      
      <div id="results" class="hidden bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
        <h2 class="text-2xl font-semibold mb-4">DCA Results</h2>
        
        <div id="summary" class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">Total Invested</h3>
            <p id="totalInvested" class="text-2xl font-bold text-green-600"></p>
          </div>
          <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">BTC Accumulated</h3>
            <p id="totalBTC" class="text-2xl font-bold text-orange-500"></p>
          </div>
          <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">Current Value</h3>
            <p id="currentValue" class="text-2xl font-bold text-blue-600"></p>
          </div>
          <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400">Gain/Loss</h3>
            <p id="gainLoss" class="text-2xl font-bold"></p>
          </div>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600">
            <thead class="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Date</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Amount ($)</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Total Invested</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">BTC Price</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">BTC Bought</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">BTC Accumulated</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Portfolio Value</th>
              </tr>
            </thead>
            <tbody id="resultsTableBody" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">
            </tbody>
          </table>
        </div>
      </div>
  </main>
</Layout>

<script>
  interface PriceData {
    date: string;
    price_usd: number;
    source: string;
  }

  interface DCAResult {
    date: string;
    price: number;
    amountUSD: number;
    btcBought: number;
    totalInvested: number;
    totalBTC: number;
    portfolioValue: number;
  }

  let priceData: PriceData[] = [];
  let currentPrice = 0;

  // Load price data
  async function loadPriceData() {
    try {
      const response = await fetch('/bitcoin/price_data.csv');
      const csvText = await response.text();
      const lines = csvText.split('\n');
      
      // Skip header and parse data
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line) {
          const [date, price, source] = line.split(',');
          priceData.push({
            date: date,
            price_usd: parseFloat(price),
            source: source
          });
        }
      }
      
      // Sort by date
      priceData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
      
      // Get current price (last entry)
      if (priceData.length > 0) {
        currentPrice = priceData[priceData.length - 1].price_usd;
      }
      
      console.log(`Loaded ${priceData.length} price data points`);
    } catch (error) {
      console.error('Error loading price data:', error);
    }
  }

  function getWeekStart(date: Date): Date {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day;
    return new Date(d.setDate(diff));
  }

  function getMonthStart(date: Date): Date {
    return new Date(date.getFullYear(), date.getMonth(), 1);
  }

  function getPriceForPeriod(startDate: Date, endDate: Date, strategy: string): number {
    const periodPrices = priceData.filter(p => {
      const priceDate = new Date(p.date);
      return priceDate >= startDate && priceDate <= endDate;
    });

    if (periodPrices.length === 0) {
      // Find closest price
      const targetTime = startDate.getTime();
      let closestPrice = priceData[0];
      let closestDiff = Math.abs(new Date(closestPrice.date).getTime() - targetTime);
      
      for (const price of priceData) {
        const diff = Math.abs(new Date(price.date).getTime() - targetTime);
        if (diff < closestDiff) {
          closestDiff = diff;
          closestPrice = price;
        }
      }
      return closestPrice.price_usd;
    }

    switch (strategy) {
      case 'highest':
        return Math.max(...periodPrices.map(p => p.price_usd));
      case 'lowest':
        return Math.min(...periodPrices.map(p => p.price_usd));
      case 'average':
      default:
        return periodPrices.reduce((sum, p) => sum + p.price_usd, 0) / periodPrices.length;
    }
  }

  function calculateDCA(startDate: Date, period: string, priceStrategy: string, amount: number): DCAResult[] {
    const results: DCAResult[] = [];
    const endDate = new Date(); // Today
    let currentDate = new Date(startDate);
    let totalInvested = 0;
    let totalBTC = 0;

    while (currentDate <= endDate) {
      let periodEndDate = new Date(currentDate);
      let price = 0;

      switch (period) {
        case 'daily':
          price = getPriceForPeriod(currentDate, currentDate, 'average');
          currentDate.setDate(currentDate.getDate() + 1);
          break;
        case 'weekly':
          periodEndDate = new Date(currentDate);
          periodEndDate.setDate(periodEndDate.getDate() + 6);
          price = getPriceForPeriod(currentDate, periodEndDate, priceStrategy);
          currentDate.setDate(currentDate.getDate() + 7);
          break;
        case 'monthly':
          periodEndDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
          price = getPriceForPeriod(currentDate, periodEndDate, priceStrategy);
          currentDate.setMonth(currentDate.getMonth() + 1);
          break;
      }

      if (price > 0) {
        const btcBought = amount / price;
        totalInvested += amount;
        totalBTC += btcBought;
        
        results.push({
          date: new Date(currentDate.getTime() - (period === 'daily' ? 86400000 : period === 'weekly' ? 604800000 : 2592000000)).toISOString().split('T')[0],
          price: price,
          amountUSD: amount,
          btcBought: btcBought,
          totalInvested: totalInvested,
          totalBTC: totalBTC,
          portfolioValue: totalBTC * currentPrice
        });
      }
    }

    return results.reverse(); // Newest first
  }

  function formatCurrency(value: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(value);
  }

  function formatBTC(value: number): string {
    return value.toFixed(8) + ' BTC';
  }

  function displayResults(results: DCAResult[]) {
    const resultsDiv = document.getElementById('results');
    const tableBody = document.getElementById('resultsTableBody');
    
    if (!results.length || !resultsDiv || !tableBody) return;

    const lastResult = results[0]; // Newest first
    
    // Update summary
    document.getElementById('totalInvested')!.textContent = formatCurrency(lastResult.totalInvested);
    document.getElementById('totalBTC')!.textContent = formatBTC(lastResult.totalBTC);
    document.getElementById('currentValue')!.textContent = formatCurrency(lastResult.portfolioValue);
    
    const gainLoss = lastResult.portfolioValue - lastResult.totalInvested;
    const gainLossPercent = (gainLoss / lastResult.totalInvested) * 100;
    const gainLossElement = document.getElementById('gainLoss')!;
    const sign = gainLoss >= 0 ? '+' : '';
    gainLossElement.innerHTML = `${formatCurrency(gainLoss)}<br><span class="text-lg">${sign}${gainLossPercent.toFixed(1)}%</span>`;
    gainLossElement.className = gainLoss >= 0 ? 'text-2xl font-bold text-green-600' : 'text-2xl font-bold text-red-600';

    // Build table
    tableBody.innerHTML = '';
    results.forEach(result => {
      const row = document.createElement('tr');
      row.className = 'hover:bg-gray-50 dark:hover:bg-gray-700';
      
      row.innerHTML = `
        <td class="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">${result.date}</td>
        <td class="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">${formatCurrency(result.amountUSD)}</td>
        <td class="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">${formatCurrency(result.totalInvested)}</td>
        <td class="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">${formatCurrency(result.price)}</td>
        <td class="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">${formatBTC(result.btcBought)}</td>
        <td class="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">${formatBTC(result.totalBTC)}</td>
        <td class="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">${formatCurrency(result.portfolioValue)}</td>
      `;
      
      tableBody.appendChild(row);
    });

    resultsDiv.classList.remove('hidden');
  }

  function togglePriceStrategy() {
    const period = (document.getElementById('period') as HTMLSelectElement).value;
    const priceStrategyDiv = document.getElementById('priceStrategyDiv');
    
    if (priceStrategyDiv) {
      priceStrategyDiv.style.display = period === 'daily' ? 'none' : 'block';
    }
  }

  // Event listeners
  document.getElementById('period')?.addEventListener('change', togglePriceStrategy);

  document.getElementById('dcaForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const loadingDiv = document.getElementById('loading');
    const resultsDiv = document.getElementById('results');
    
    if (loadingDiv) loadingDiv.classList.remove('hidden');
    if (resultsDiv) resultsDiv.classList.add('hidden');

    const formData = new FormData(e.target as HTMLFormElement);
    const startDate = new Date(formData.get('startDate') as string);
    const amount = parseFloat(formData.get('purchaseAmount') as string);
    const period = formData.get('period') as string;
    const priceStrategy = formData.get('priceStrategy') as string;

    try {
      if (priceData.length === 0) {
        await loadPriceData();
      }

      const results = calculateDCA(startDate, period, priceStrategy, amount);
      displayResults(results);
    } catch (error) {
      console.error('Error calculating DCA:', error);
      alert('Error calculating DCA results. Please try again.');
    } finally {
      if (loadingDiv) loadingDiv.classList.add('hidden');
    }
  });

  // Initialize
  togglePriceStrategy();
  loadPriceData();
</script> 